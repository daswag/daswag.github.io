[
{
	"uri": "/",
	"title": "daSWAG (Serverless Web Application Generator)",
	"tags": [],
	"description": "",
	"content": " daSWAG daSWAG helps you build serverless web apps with radically less overhead and cost. It provides a powerful, unified experience to develop, deploy, test, secure and monitor your serverless applications.\ndaSWAG consists of an open source CLI that makes it easy to intialize, develop, scaffold, deploy and test serverless web apps. You can use the tool directly in a command shell.\nIf you are new to serverless technologies and want to experience how fast and easy it is to build a serverless web app, or if you are an experienced user of the daSWAG open source CLI and want to explore new features of the CLI, you can get started here, for free.\n"
},
{
	"uri": "/release_notes/",
	"title": "Release notes",
	"tags": [],
	"description": "",
	"content": "To get the latest daSWAG news, please follow us on Twitters: @daswag_project\n \u0026gt; daSWAG release v1.0.0-beta   "
},
{
	"uri": "/release_notes/2019_08_30_daswag_1_0_0_beta/",
	"title": "&gt; daSWAG release v1.0.0-beta",
	"tags": [],
	"description": "",
	"content": " This is our first beta release for daSWAG v1.\nMost important features  Create a new daSWAG project and initialize your user management component Add an Api or a Client component to your project.  How to install This is a beta release, so it is not available on our usual \u0026ldquo;stable\u0026rdquo; release channel.\nTo install daSWAG v1.0.0-beta using NPM:\nnpm install -g daswag-cli@beta  Help and bugs If you find any issue with this release, don\u0026rsquo;t hesitate to:\n Add a bug on our bug tracker Post a question on Stack Overflow  If the issue you have is an urgent bug or security issue, please:\n Contact @daswag_project on Twitter  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/setting_up_envrionment/configuring_corporate_proxy/",
	"title": "Configuring a corporate proxy",
	"tags": [],
	"description": "",
	"content": " When daSWAG is used in a company, you probably will need to configure all tools to bypass the corporate proxy.\nYou can try to configure the HTTP_PROXY and HTTPS_PROXY environment variables or use a tool like Cntlm.\nBut this probably won\u0026rsquo;t be enough, so you will need to configure separately all the tools that are used with daSWAG.\nIntroduction Supposing your proxy is defined with:\n username password host port  The resulting configuration is: http://username:password@host:port\nIf your use Cntlm, then your configuration would be: 127.0.0.1:3128. Otherwise, follow the next steps to configure each tool individually.\nNPM configuration Use these commands:\nnpm config set proxy http://username:password@host:port npm config set https-proxy http://username:password@host:port  Or you can edit directly your ~/.npmrc file:\nproxy=http://username:password@host:port https-proxy=http://username:password@host:port https_proxy=http://username:password@host:port  Yarn configuration Use these commands:\nyarn config set proxy http://username:password@host:port yarn config set https-proxy http://username:password@host:port  Python configuration Python does not require a proxy to work, but you will need one for his package manager pip.\nTo use it behind a proxy use a proxy parameter, which according to pip --help, is in the form: scheme://[user:passwd@]proxy.server:port`\npip install --proxy http://username:password@host:port TwitterApi  Or, you can use environment variables:\nLinux, macOS, or Unix\n$ export HTTP_PROXY=http://username:password@host:port $ export HTTPS_PROXY=http://username:password@host:port  Windows\nC:\\\u0026gt; setx HTTP_PROXY http://username:password@host:port C:\\\u0026gt; set HTTPS_PROXY=http://username:password@host:port  AWS Cli Use the commands to set your environment variables:\nLinux, macOS, or Unix\n$ export HTTP_PROXY=http://username:password@host:port $ export HTTPS_PROXY=http://username:password@host:port  Windows\nC:\\\u0026gt; setx HTTP_PROXY http://username:password@host:port C:\\\u0026gt; set HTTPS_PROXY=http://username:password@host:port  You will find additionnal details on docs.aws.amazon.com\nGit configuration Use these commands:\ngit config --global http.proxy http://username:password@host:port git config --global https.proxy http://username:password@host:port  Or you can edit directly your ~/.gitconfig file:\n[http] proxy = http://username:password@host:port [https] proxy = http://username:password@host:port  Docker Depending on your OS, you have to edit a specific file (/etc/sysconfig/docker or /etc/default/docker).\nThen, you have to restart the docker service with: sudo service docker restart.\nIt will not apply to systemd. See this page from docker to configure the proxy.\n"
},
{
	"uri": "/setting_up_envrionment/creating_cloud_account/",
	"title": "Creating a Cloud provider account",
	"tags": [],
	"description": "",
	"content": " XXXXXXXX AWS Free Tier\n Introduction Amazon Web Services Creating your AWS account  Go to the Amazon Web Services home page.\n Choose Create an AWS Account. Note: If you\u0026rsquo;ve signed in to AWS recently, the button might say Sign In to the Console.\n Enter your account information, and then choose Continue. Important: Be sure that you enter your account information correctly, especially your email address. If you enter your email address incorrectly, you won\u0026rsquo;t be able to access your account. If Create a new AWS account isn\u0026rsquo;t visible, first choose Sign in to a different account, and then choose Create a new AWS account.\n Choose Personal or Professional. Note: Personal accounts and professional accounts have the same features and functions.\n Enter your company or personal information.\n Read and accept the AWS Customer Agreement. Note: Be sure that you read and understand the terms of the AWS Customer Agreement.\n Choose Create Account and Continue. You receive an email to confirm that your account is created. You can sign in to your new account using the email address and password you supplied. However, you can\u0026rsquo;t use AWS services until you finish activating your account.\n  Add a payment method On the Payment Information page, enter the information about your payment method, and then choose Secure Submit.\nNote: If you want to use a different address for your AWS account, choose Use a new address before you choose Secure Submit.\nVerify your phone number  Choose whether you want to verify your account by Text message (SMS) or a Voice call.\n Choose your country or region code from the list.\n Enter a phone number where you can be reached in the next few minutes.\n Enter the code displayed in the captcha.\n When you\u0026rsquo;re ready, choose Contact me. In a few moments, an automated system will contact you. Note: If you chose to verify your account by SMS, choose Send SMS instead.\n Enter the PIN you receive by text message or voice call, and then choose Continue.\n  Choose an AWS Support plan On the Select a Support Plan page, choose one of the available Support plans. For a description of the available Support plans and their benefits, see Compare AWS Support Plans.\nWait for account activation After you choose a Support plan, a confirmation page indicates that your account is being activated. Accounts are usually activated within a few minutes, but the process might take up to 24 hours.\nYou can sign in to your AWS account during this time. The AWS home page might display a button that shows \u0026ldquo;Complete Sign Up\u0026rdquo; during this time, even if you\u0026rsquo;ve completed all the steps in the sign-up process.\nWhen your account is fully activated, you\u0026rsquo;ll receive a confirmation email. After you receive this email, you have full access to all AWS services.\nTroubleshooting delays in account activation Account activation can sometimes be delayed. If the process takes more than 24 hours, check the following:\n Finish the account activation process. You might have accidentally closed the window for the sign-up process before you\u0026rsquo;ve added all the necessary information. To finish the sign-up process, open https://aws-portal.amazon.com/gp/aws/developer/registration/index.html and sign in using the email address and password you chose for the account.\n Check the information associated with your payment method. Check Payment Methods in the AWS Billing and Cost Management console. Fix any errors in the information.\n Contact your financial institution. Financial institutions occasionally reject authorization requests from AWS for various reasons. Contact your payment method\u0026rsquo;s issuing institution and ask that they approve authorization requests from AWS. Note: AWS cancels the authorization request as soon as it\u0026rsquo;s approved by your financial institution. You aren\u0026rsquo;t charged for authorization requests from AWS. Authorization requests might still appear as a small charge (usually 1 USD) on statements from your financial institution.\n Check your email for requests for additional information. Check your email to see if AWS needs any information from you to complete the activation process.\n Try a different browser.\n Contact AWS Support. Contact AWS Support for help. Be sure to mention any troubleshooting steps that you already tried. Note: Don\u0026rsquo;t provide sensitive information, such as credit card numbers, in any correspondence with AWS.\n  Configuring the AWS CLI This section explains how to configure the settings that the AWS Command Line Interface (AWS CLI) uses to interact with AWS, including your security credentials, the default output format, and the default AWS Region.\nAWS requires that all incoming requests are cryptographically signed. The AWS CLI does this for you. The \u0026ldquo;signature\u0026rdquo; includes a date/time stamp. Therefore, you must ensure that your computer\u0026rsquo;s date and time are set correctly. If you don\u0026rsquo;t, and the date/time in the signature is too far off of the date/time recognized by the AWS service, then AWS rejects the request.\n Quickly Configuring the AWS CLI For general use, the aws configure command is the fastest way to set up your AWS CLI installation.\n$ aws configure AWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLE AWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY Default region name [None]: us-west-2 Default output format [None]: json  When you type this command, the AWS CLI prompts you for four pieces of information (access key, secret access key, AWS Region, and output format). These are described in the following sections. The AWS CLI stores this information in a profile (a collection of settings) named default. The information in the default profile is used any time you run an AWS CLI command that doesn\u0026rsquo;t explicitly specify a profile to use.\nAccess Key and Secret Access Key The AWS Access Key ID and AWS Secret Access Key are your AWS credentials. They are associated with an AWS Identity and Access Management (IAM) user or role that determines what permissions you have. For a tutorial on how to create a user with the IAM service, see Creating Your First IAM Admin User and Group in the IAM User Guide.\nAccess keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. If you don\u0026rsquo;t have access keys, you can create them from the AWS Management Console. As a best practice, do not use the AWS account root user access keys for any task where it\u0026rsquo;s not required. Instead, create a new administrator IAM user with access keys for yourself.\nThe only time that you can view or download the secret access key is when you create the keys. You cannot recover them later. However, you can create new access keys at any time. You must also have permissions to perform the required IAM actions. For more information, see Permissions Required to Access IAM Resources in the IAM User Guide.\nTo create access keys for an IAM user\n Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.\n In the navigation pane, choose Users.\n Choose the name of the user whose access keys you want to create, and then choose the Security credentials tab.\n In the Access keys section, choose Create access key.\n To view the new access key pair, choose Show. You will not have access to the secret access key again after this dialog box closes. Your credentials will look something like this:\n Access key ID: AKIAIOSFODNN7EXAMPLE\n Secret access key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n  To download the key pair, choose Download .csv file. Store the keys in a secure location. You will not have access to the secret access key again after this dialog box closes. Keep the keys confidential in order to protect your AWS account and never email them. Do not share them outside your organization, even if an inquiry appears to come from AWS or Amazon.com. No one who legitimately represents Amazon will ever ask you for your secret key.\n After you download the .csv file, choose Close. When you create an access key, the key pair is active by default, and you can use the pair right away.\n  Region The Default region name identifies the AWS Region whose servers you want to send your requests to by default. This is typically the Region closest to you, but it can be any Region. For example, you can type us-west-2 to use US West (Oregon). This is the Region that all later requests are sent to, unless you specify otherwise in an individual command.\nYou must specify an AWS Region when using the AWS CLI, either explicitly or by setting a default Region. For a list of the available Regions, see Regions and Endpoints. The Region designators used by the AWS CLI are the same names that you see in AWS Management Console URLs and service endpoints.\n Output Format The Default output format specifies how the results are formatted. The value can be any of the values in the following list. If you don\u0026rsquo;t specify an output format, json is used as the default.\n json: The output is formatted as a JSON string.\n text: The output is formatted as multiple lines of tab-separated string values, which can be useful if you want to pass the output to a text processor, like grep, sed, or awk.\n table: The output is formatted as a table using the characters +|- to form the cell borders. It typically presents the information in a \u0026ldquo;human-friendly\u0026rdquo; format that is much easier to read than the others, but not as programmatically useful.\n  Creating Multiple Profiles If you use the command shown in the previous section, the result is a single profile named default. You can create additional configurations that you can refer to with a name by specifying the --profile option and assigning a name. The following example creates a profile named produser. You can specify credentials from a completely different account and region than the other profiles.\n$ aws configure --profile produser AWS Access Key ID [None]: AKIAI44QH8DHBEXAMPLE AWS Secret Access Key [None]: je7MtGbClwBF/2Zp9Utk/h3yCo8nvbEXAMPLEKEY Default region name [None]: us-east-1 Default output format [None]: text  Then, when you run a command, you can omit the --profile option and use the credentials and settings stored in the default profile.\n$ aws s3 ls  Or you can specify a --profile profilename and use the credentials and settings stored under that name.\n$ aws s3 ls --profile produser  To update any of your settings, simply run aws configure again (with or without the --profile parameter, depending on which profile you want to update) and enter new values as appropriate. The next sections contain more information about the files that aws configure creates, additional settings, and named profiles.\n"
},
{
	"uri": "/authors/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": " Thanks to our wonderful contributors  for making Open Source a better place! .ghContributors{ display:flex; flex-flow: wrap; align-content: flex-start }\n.ghContributors \u0026gt; div{ width: 50% ; display: inline-flex; margin-bottom: 5px; } .ghContributors \u0026gt; div label{ padding-left: 4px ; } .ghContributors \u0026gt; div span{ font-size: x-small; padding-left: 4px ; }\n  @stevehouel 1 commits \n\n"
},
{
	"uri": "/getting_started/",
	"title": "Getting started",
	"tags": [],
	"description": "",
	"content": " First things first, let\u0026rsquo;s get the Serverless Framework open source CLI installed on your machine.\nInstall or update daSWAG CLI # Install the daSWAG CLI using npm npm install -g daSWAG # Or an alternative yarn global add daswag-cli # You can also update the daSWAG cli from a previous version npm update -g serverless  If you don’t already have Node 10 or higher on your machine, you’ll need to do that first. - Install Node.js from the Node.js website (please use an LTS 64-bit version, non-LTS versions are not supported)\nOnce you have the Serverless Framework installed, simply run the ‘serverless’ command and follow the prompts. In no time you will have deployed your first serverless app using the Serverless Framework CLI and configured your Serverless Framework Dashboard account to automatically monitor your serverless app, generate alerts, and much more.\nOptional installations  Install Git from git-scm.com. We recommend you also use a tool like SourceTree if you are starting with Git. Depending on your target configuration, you will need some peer dependencies to be able to build and deploy your project.  Install AWS CLI from docs.aws.amazon.com. Then follow all steps to configure properly your credentials. Install AWS SAM CLI from docs.aws.amazon.com Install Python 3.7 from Python Software Foundation (please use only 3.7.x versions, others are not supported yet).   Troubleshooting If you have problems using Yarn globally, be sure to have $HOME/.config/yarn/global/node_modules/.bin in your path.\nOn Mac or Linux: export PATH=\u0026quot;$PATH:`yarn global bin`:$HOME/.config/yarn/global/node_modules/.bin\u0026quot;\nCreate a new project Once you have the daSWAG CLI installed, simply run the daswag new command and follow the prompts. In no time you will have deployed your first serverless web app using the daSWAG CLI.\ndaswag new  Additional information daSWAG uses Yeoman for code generation and Oclif to manage the CLI. To find more information, tips and help, please have a look at the Yeoman \u0026ldquo;getting starting\u0026rdquo; guide before submitting a bug.\nThe configuration will be stored in a generated .yo-rc.json file.\n"
},
{
	"uri": "/setting_up_envrionment/",
	"title": "Setting up your environnement",
	"tags": [],
	"description": "",
	"content": " Chapter 1 Setting up your environment Discover how to configure your environment in order to develop / build / package and deploy daSWAG\n"
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]