[
{
	"uri": "/",
	"title": "daSWAG",
	"tags": [],
	"description": "",
	"content": " daSWAG Welcome Home page is comming soon. Meanwhile you can read the rest of this documentation.\n"
},
{
	"uri": "/release_notes/",
	"title": "Release notes",
	"tags": [],
	"description": "",
	"content": "To get the latest daSWAG news, please follow us on Twitters: @daswag_project\n \u0026gt; daSWAG release v1.0.0-beta   "
},
{
	"uri": "/release_notes/2019_08_30_daswag_1_0_0_beta/",
	"title": "&gt; daSWAG release v1.0.0-beta",
	"tags": [],
	"description": "",
	"content": " This is our first beta release for daSWAG v1.\nMost important features  Create a new daSWAG project and initialize your user management component Add an Api or a Client component to your project.  How to install This is a beta release, so it is not available on our usual \u0026ldquo;stable\u0026rdquo; release channel.\nTo install daSWAG v1.0.0-beta using NPM:\nnpm install -g daswag-cli@beta  Help and bugs If you find any issue with this release, don\u0026rsquo;t hesitate to:\n Add a bug on our bug tracker Post a question on Stack Overflow  If the issue you have is an urgent bug or security issue, please:\n Contact @daswag_project on Twitter  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/setting_up_envrionment/configuring_corporate_proxy/",
	"title": "Configuring a corporate proxy",
	"tags": [],
	"description": "",
	"content": " When daSWAG is used in a company, you probably will need to configure all tools to bypass the corporate proxy.\nYou can try to configure the HTTP_PROXY and HTTPS_PROXY environment variables or use a tool like Cntlm.\nBut this probably won\u0026rsquo;t be enough, so you will need to configure separately all the tools that are used with daSWAG.\nIntroduction Supposing your proxy is defined with:\n username password host port  The resulting configuration is: http://username:password@host:port\nIf your use Cntlm, then your configuration would be: 127.0.0.1:3128. Otherwise, follow the next steps to configure each tool individually.\nNPM configuration Use these commands:\nnpm config set proxy http://username:password@host:port npm config set https-proxy http://username:password@host:port  Or you can edit directly your ~/.npmrc file:\nproxy=http://username:password@host:port https-proxy=http://username:password@host:port https_proxy=http://username:password@host:port  Yarn configuration Use these commands:\nyarn config set proxy http://username:password@host:port yarn config set https-proxy http://username:password@host:port  Python configuration Python does not require a proxy to work, but you will need one for his package manager pip.\nTo use it behind a proxy use a proxy parameter, which according to pip --help, is in the form: scheme://[user:passwd@]proxy.server:port`\npip install --proxy http://username:password@host:port TwitterApi  Or, you can use environment variables:\nLinux, macOS, or Unix\n$ export HTTP_PROXY=http://username:password@host:port $ export HTTPS_PROXY=http://username:password@host:port  Windows\nC:\\\u0026gt; setx HTTP_PROXY http://username:password@host:port C:\\\u0026gt; set HTTPS_PROXY=http://username:password@host:port  AWS Cli Use the commands to set your environment variables:\nLinux, macOS, or Unix\n$ export HTTP_PROXY=http://username:password@host:port $ export HTTPS_PROXY=http://username:password@host:port  Windows\nC:\\\u0026gt; setx HTTP_PROXY http://username:password@host:port C:\\\u0026gt; set HTTPS_PROXY=http://username:password@host:port  You will find additionnal details on docs.aws.amazon.com\nGit configuration Use these commands:\ngit config --global http.proxy http://username:password@host:port git config --global https.proxy http://username:password@host:port  Or you can edit directly your ~/.gitconfig file:\n[http] proxy = http://username:password@host:port [https] proxy = http://username:password@host:port  Docker Depending on your OS, you have to edit a specific file (/etc/sysconfig/docker or /etc/default/docker).\nThen, you have to restart the docker service with: sudo service docker restart.\nIt will not apply to systemd. See this page from docker to configure the proxy.\n"
},
{
	"uri": "/setting_up_envrionment/creating_cloud_account/",
	"title": "Creating a Cloud provider account",
	"tags": [],
	"description": "",
	"content": " Introduction Supposing your proxy is defined with:\n username password host port  The resulting configuration is: http://username:password@host:port\nIf your use Cntlm, then your configuration would be: 127.0.0.1:3128. Otherwise, follow the next steps to configure each tool individually.\nNPM configuration Use these commands:\nnpm config set proxy http://username:password@host:port npm config set https-proxy http://username:password@host:port  Or you can edit directly your ~/.npmrc file:\nproxy=http://username:password@host:port https-proxy=http://username:password@host:port https_proxy=http://username:password@host:port  Yarn configuration Use these commands:\nyarn config set proxy http://username:password@host:port yarn config set https-proxy http://username:password@host:port  Python configuration Python does not require a proxy to work, but you will need one for his package manager pip.\nTo use it behind a proxy use a proxy parameter, which according to pip --help, is in the form: scheme://[user:passwd@]proxy.server:port`\npip install --proxy http://username:password@host:port TwitterApi  Or, you can use environment variables:\nLinux, macOS, or Unix\n$ export HTTP_PROXY=http://username:password@host:port $ export HTTPS_PROXY=http://username:password@host:port  Windows\nC:\\\u0026gt; setx HTTP_PROXY http://username:password@host:port C:\\\u0026gt; set HTTPS_PROXY=http://username:password@host:port  AWS Cli Use the commands to set your environment variables:\nLinux, macOS, or Unix\n$ export HTTP_PROXY=http://username:password@host:port $ export HTTPS_PROXY=http://username:password@host:port  Windows\nC:\\\u0026gt; setx HTTP_PROXY http://username:password@host:port C:\\\u0026gt; set HTTPS_PROXY=http://username:password@host:port  You will find additionnal details on docs.aws.amazon.com\nGit configuration Use these commands:\ngit config --global http.proxy http://username:password@host:port git config --global https.proxy http://username:password@host:port  Or you can edit directly your ~/.gitconfig file:\n[http] proxy = http://username:password@host:port [https] proxy = http://username:password@host:port  Docker Depending on your OS, you have to edit a specific file (/etc/sysconfig/docker or /etc/default/docker).\nThen, you have to restart the docker service with: sudo service docker restart.\nIt will not apply to systemd. See this page from docker to configure the proxy.\n"
},
{
	"uri": "/authors/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": " Thanks to our wonderful contributors  for making Open Source a better place! .ghContributors{ display:flex; flex-flow: wrap; align-content: flex-start }\n.ghContributors \u0026gt; div{ width: 50% ; display: inline-flex; margin-bottom: 5px; } .ghContributors \u0026gt; div label{ padding-left: 4px ; } .ghContributors \u0026gt; div span{ font-size: x-small; padding-left: 4px ; }\n  @stevehouel 1 commits \n\n"
},
{
	"uri": "/getting_started/",
	"title": "Getting started",
	"tags": [],
	"description": "",
	"content": " Installing daSWAG CLI Installation types We provide 2 ways of working with daSWAG. If in doubt, choose our 2nd option, \u0026ldquo;Installation with Npm\u0026rdquo;:\n Installation with Npm is the classical way of working with daSWAG. Everything is installed on your machine, which can be a little complex to set up, but that\u0026rsquo;s how most people usually work. In case of doubt, choose this installation. Installation with Yarn is the same as classical \u0026ldquo;Installation with Npm\u0026rdquo;, but using Yarn instead of Npm. Please note that Yarn is a lot less popular than Npm in our community, so this isn\u0026rsquo;t a recommended option for newcomers.  Prerequisites  Install Python 3.7 from Python Software Foundation (please use only 3.7.x versions, others are not supported yet).  Installation with Npm (recommended for normal users)  Install Node.js from the Node.js website (please use an LTS 64-bit version, non-LTS versions are not supported) Install daSWAG: npm install -g daswag-cli  Now that daSWAG is installed, your next step is to create a project\nInstallation with Yarn (alternative to Npm) This is the same procedure as using Npm, with two differences:\n Instead of upgrading Npm in step 3, install Yarn from the Yarn website Use yarn global add instead of npm install -g, for example:  To install Yeoman, type: yarn global add yo To install daSWAG, type: yarn global add daswag-cli   Troubleshooting If you have problems using Yarn globally, be sure to have $HOME/.config/yarn/global/node_modules/.bin in your path.\nOn Mac or Linux: export PATH=\u0026quot;$PATH:`yarn global bin`:$HOME/.config/yarn/global/node_modules/.bin\u0026quot;\nOptional installations  Install Git from git-scm.com. We recommend you also use a tool like SourceTree if you are starting with Git. Depending on your target configuration, you will need some peer dependencies to be able to build and deploy your project.  Install AWS CLI from docs.aws.amazon.com. Then follow all steps to configure properly your credentials. Install AWS SAM CLI from docs.aws.amazon.com   Once those dependencies have been installed. You will need to create an Cloud provider account before to continue further. Go to the following page to have more information on this procedure create a cloud account\nAdditional information daSWAG uses Yeoman for code generation and Oclif to manage the CLI. To find more information, tips and help, please have a look at the Yeoman \u0026ldquo;getting starting\u0026rdquo; guide before submitting a bug.\nThe configuration will be stored in a generated .yo-rc.json file.\n"
},
{
	"uri": "/setting_up_envrionment/",
	"title": "Setting up your environnement",
	"tags": [],
	"description": "",
	"content": " Chapter 1 Setting up your environment Discover how to configure your environment in order to develop / build / package and deploy daSWAG\n"
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]