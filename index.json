[
{
	"uri": "/",
	"title": "daSWAG (Serverless Web Application Generator)",
	"tags": [],
	"description": "",
	"content": " daSWAG daSWAG helps you build serverless web apps with radically less overhead and cost. It provides a powerful, unified experience to develop, deploy, test, secure and monitor your serverless applications.\ndaSWAG consists of an open source CLI that makes it easy to intialize, develop, scaffold, deploy and test serverless web apps. You can use the tool directly in a command shell.\nIf you are new to serverless technologies and want to experience how fast and easy it is to build a serverless web app, or if you are an experienced user of the daSWAG open source CLI and want to explore new features of the CLI, you can get started here, for free.\n"
},
{
	"uri": "/release_notes/",
	"title": "Release notes",
	"tags": [],
	"description": "",
	"content": "To get the latest daSWAG news, please follow us on Twitters: @daswag_project\n \u0026gt; daSWAG release v1.0.0-beta   "
},
{
	"uri": "/getting_started/",
	"title": "Getting started",
	"tags": [],
	"description": "",
	"content": " First things first, let\u0026rsquo;s get the Serverless Framework open source CLI installed on your machine.\nInstall or update daSWAG CLI # Install the daSWAG CLI using npm npm install -g daSWAG # Or an alternative yarn global add daswag-cli # You can also update the daSWAG cli from a previous version npm update -g daswag  If you don’t already have Node 10 or higher on your machine, you’ll need to do that first. - Install Node.js from the Node.js website (please use an LTS 64-bit version, non-LTS versions are not supported)\nOnce you have the Serverless Framework installed, simply run the ‘serverless’ command and follow the prompts. In no time you will have deployed your first serverless app using the Serverless Framework CLI and configured your Serverless Framework Dashboard account to automatically monitor your serverless app, generate alerts, and much more.\nOptional installations  Install Git from git-scm.com. We recommend you also use a tool like SourceTree if you are starting with Git. Depending on your target configuration, you will need some peer dependencies to be able to build and deploy your project.  Install AWS CLI from docs.aws.amazon.com. Then follow all steps to configure properly your credentials. Install AWS SAM CLI from docs.aws.amazon.com Install Python 3.7 from Python Software Foundation (please use only 3.7.x versions, others are not supported yet).   Troubleshooting If you have problems using Yarn globally, be sure to have $HOME/.config/yarn/global/node_modules/.bin in your path.\nOn Mac or Linux: export PATH=\u0026quot;$PATH:`yarn global bin`:$HOME/.config/yarn/global/node_modules/.bin\u0026quot;\nCreate a new project Once you have the daSWAG CLI installed, simply run the daswag new command and follow the prompts. In no time you will have deployed your first serverless web app using the daSWAG CLI.\ndaswag new  Additional information daSWAG uses Yeoman for code generation and Oclif to manage the CLI. To find more information, tips and help, please have a look at the Yeoman \u0026ldquo;getting starting\u0026rdquo; guide before submitting a bug.\nThe configuration will be stored in a generated .yo-rc.json file.\n"
},
{
	"uri": "/setting_up_envrionment/",
	"title": "Setting up your environnement",
	"tags": [],
	"description": "",
	"content": " Chapter 1 Setting up your environment Discover how to configure your environment in order to develop / build / package and deploy daSWAG\n"
},
{
	"uri": "/release_notes/2019_08_30_daswag_1_0_0_beta/",
	"title": "&gt; daSWAG release v1.0.0-beta",
	"tags": [],
	"description": "",
	"content": " This is our first beta release for daSWAG v1.\nMost important features  Create a new daSWAG project and initialize your user management component Add an Api or a Client component to your project.  How to install This is a beta release, so it is not available on our usual \u0026ldquo;stable\u0026rdquo; release channel.\nTo install daSWAG v1.0.0-beta using NPM:\nnpm install -g daswag-cli@beta  Help and bugs If you find any issue with this release, don\u0026rsquo;t hesitate to:\n Add a bug on our bug tracker Post a question on Stack Overflow  If the issue you have is an urgent bug or security issue, please:\n Contact @daswag_project on Twitter  "
},
{
	"uri": "/cli_reference/",
	"title": "CLI Reference",
	"tags": [],
	"description": "",
	"content": "  Description Getting Started Usage Commands   Getting Started The Getting Started tutorial is a step-by-step guide to introduce you to daSWAG. If you have not developed anything using Serverless technologies, this Getting Started is a great place to get started.\nUsage $ npm install -g daswag-cli $ daswag COMMAND running command... $ daswag (-v|--version|version) daswag-cli/1.0.0-beta darwin-x64 node-v10.15.1 $ daswag --help [COMMAND] USAGE $ daswag COMMAND ...  Commands  daswag add daswag add:api daswag add:client daswag autocomplete [SHELL] daswag doc [KEYWORD] daswag help [COMMAND] daswag new  daswag add add a new component to your project\nUSAGE $ daswag add  See code: src/commands/add/index.ts\ndaswag add:api Add an API based service\nUSAGE $ daswag add:api  See code: src/commands/add/api.ts\ndaswag add:client Add a client interface\nUSAGE $ daswag add:client  See code: src/commands/add/client.ts\ndaswag autocomplete [SHELL] display autocomplete installation instructions\nUSAGE $ daswag autocomplete [SHELL] ARGUMENTS SHELL shell type OPTIONS -r, --refresh-cache Refresh cache (ignores displaying instructions) EXAMPLES $ daswag autocomplete $ daswag autocomplete bash $ daswag autocomplete zsh $ daswag autocomplete --refresh-cache  See code: @oclif/plugin-autocomplete\ndaswag doc [KEYWORD] opens the official daSWAG documentation (daswag.tech/documentation) in a browser, and searches for a given keyword.\nUSAGE $ daswag doc [KEYWORD] OPTIONS -s, --search Search on Google  See code: src/commands/doc/index.ts\ndaswag help [COMMAND] display help for daswag\nUSAGE $ daswag help [COMMAND] ARGUMENTS COMMAND command to show help for OPTIONS --all see all commands in CLI  See code: @oclif/plugin-help\ndaswag new creates and initialize a new daSWAG project.\nUSAGE $ daswag new  See code: src/commands/new/index.ts "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/setting_up_envrionment/configuring_corporate_proxy/",
	"title": "Configuring a corporate proxy",
	"tags": [],
	"description": "",
	"content": " When daSWAG is used in a company, you probably will need to configure all tools to bypass the corporate proxy.\nYou can try to configure the HTTP_PROXY and HTTPS_PROXY environment variables or use a tool like Cntlm.\nBut this probably won\u0026rsquo;t be enough, so you will need to configure separately all the tools that are used with daSWAG.\nIntroduction Supposing your proxy is defined with:\n username password host port  The resulting configuration is: http://username:password@host:port\nIf your use Cntlm, then your configuration would be: 127.0.0.1:3128. Otherwise, follow the next steps to configure each tool individually.\nNPM configuration Use these commands:\nnpm config set proxy http://username:password@host:port npm config set https-proxy http://username:password@host:port  Or you can edit directly your ~/.npmrc file:\nproxy=http://username:password@host:port https-proxy=http://username:password@host:port https_proxy=http://username:password@host:port  Yarn configuration Use these commands:\nyarn config set proxy http://username:password@host:port yarn config set https-proxy http://username:password@host:port  Python configuration Python does not require a proxy to work, but you will need one for his package manager pip.\nTo use it behind a proxy use a proxy parameter, which according to pip --help, is in the form: scheme://[user:passwd@]proxy.server:port`\npip install --proxy http://username:password@host:port TwitterApi  Or, you can use environment variables:\nLinux, macOS, or Unix\n$ export HTTP_PROXY=http://username:password@host:port $ export HTTPS_PROXY=http://username:password@host:port  Windows\nC:\\\u0026gt; setx HTTP_PROXY http://username:password@host:port C:\\\u0026gt; set HTTPS_PROXY=http://username:password@host:port  AWS Cli Use the commands to set your environment variables:\nLinux, macOS, or Unix\n$ export HTTP_PROXY=http://username:password@host:port $ export HTTPS_PROXY=http://username:password@host:port  Windows\nC:\\\u0026gt; setx HTTP_PROXY http://username:password@host:port C:\\\u0026gt; set HTTPS_PROXY=http://username:password@host:port  You will find additionnal details on docs.aws.amazon.com\nGit configuration Use these commands:\ngit config --global http.proxy http://username:password@host:port git config --global https.proxy http://username:password@host:port  Or you can edit directly your ~/.gitconfig file:\n[http] proxy = http://username:password@host:port [https] proxy = http://username:password@host:port  Docker Depending on your OS, you have to edit a specific file (/etc/sysconfig/docker or /etc/default/docker).\nThen, you have to restart the docker service with: sudo service docker restart.\nIt will not apply to systemd. See this page from docker to configure the proxy.\n"
},
{
	"uri": "/authors/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": " Thanks to our wonderful contributors  for making Open Source a better place! .ghContributors{ display:flex; flex-flow: wrap; align-content: flex-start }\n.ghContributors \u0026gt; div{ width: 50% ; display: inline-flex; margin-bottom: 5px; } .ghContributors \u0026gt; div label{ padding-left: 4px ; } .ghContributors \u0026gt; div span{ font-size: x-small; padding-left: 4px ; }\n  @stevehouel 1 commits \n\n"
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/setting_up_envrionment/using_cloud_account/",
	"title": "Using a Cloud provider account",
	"tags": [],
	"description": "",
	"content": " The deployment of a serverless web application requires the use of an account on the target cloud service provider. The use of such services may generate costs at the end of the month depending on your use. That\u0026rsquo;s why, you will have to fill your credit card number when creating a cloud provider account. Don\u0026rsquo;t worry, daSWAG makes maximum use of free tier services, allowing you to use your application in development and integration environments with complete peace of mind.\n Amazon Web Services Free Tier I invite you to read the site: AWS Free Tier and look at the pricing model of each of the services used to have a better understanding of your possibilities and the price it will cost.\n Configure the AWS CLI For general use, the aws configure command is the fastest way to set up your AWS CLI installation.\n$ aws configure AWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLE AWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY Default region name [None]: us-west-2 Default output format [None]: json  When you type this command, the AWS CLI prompts you for four pieces of information (access key, secret access key, AWS Region, and output format). These are described in the following sections. The AWS CLI stores this information in a profile (a collection of settings) named default. The information in the default profile is used any time you run an AWS CLI command that doesn\u0026rsquo;t explicitly specify a profile to use.\nAccess Key and Secret Access Key The AWS Access Key ID and AWS Secret Access Key are your AWS credentials. They are associated with an AWS Identity and Access Management (IAM) user or role that determines what permissions you have. For a tutorial on how to create a user with the IAM service, see Creating Your First IAM Admin User and Group in the IAM User Guide.\nAccess keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. If you don\u0026rsquo;t have access keys, you can create them from the AWS Management Console. As a best practice, do not use the AWS account root user access keys for any task where it\u0026rsquo;s not required. Instead, create a new administrator IAM user with access keys for yourself.\nThe only time that you can view or download the secret access key is when you create the keys. You cannot recover them later. However, you can create new access keys at any time. You must also have permissions to perform the required IAM actions. For more information, see Permissions Required to Access IAM Resources in the IAM User Guide.\nTo create access keys for an IAM user\n Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.\n In the navigation pane, choose Users.\n Choose the name of the user whose access keys you want to create, and then choose the Security credentials tab.\n In the Access keys section, choose Create access key.\n To view the new access key pair, choose Show. You will not have access to the secret access key again after this dialog box closes. Your credentials will look something like this:\n Access key ID: AKIAIOSFODNN7EXAMPLE\n Secret access key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n  To download the key pair, choose Download .csv file. Store the keys in a secure location. You will not have access to the secret access key again after this dialog box closes. Keep the keys confidential in order to protect your AWS account and never email them. Do not share them outside your organization, even if an inquiry appears to come from AWS or Amazon.com. No one who legitimately represents Amazon will ever ask you for your secret key.\n After you download the .csv file, choose Close. When you create an access key, the key pair is active by default, and you can use the pair right away.\n  Region The Default region name identifies the AWS Region whose servers you want to send your requests to by default. This is typically the Region closest to you, but it can be any Region. For example, you can type us-west-2 to use US West (Oregon). This is the Region that all later requests are sent to, unless you specify otherwise in an individual command.\nYou must specify an AWS Region when using the AWS CLI, either explicitly or by setting a default Region. For a list of the available Regions, see Regions and Endpoints. The Region designators used by the AWS CLI are the same names that you see in AWS Management Console URLs and service endpoints.\n For more information about configuring your AWS CLI, please follow the latest AWS Documentation page AWS Documentation\n "
}]